{"version":3,"sources":["utils/supabase.ts","hooks/useSupaBase.ts","hooks/useUser.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["supabaseUrl","String","process","REACT_APP_SUPABASE_URL","supabaseKey","REACT_APP_SUPABASE_TOKEN","supabase","createClient","useSupaBase","asyncFunction","useState","status","setStatus","response","setResponse","undefined","error","setError","execute","useCallback","a","useEffect","useUser","id","supabaseQuery","from","select","eq","App","className","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAEMA,EAAcC,OAAOC,oJAAYC,wBACjCC,EAAcH,OAAOC,oJAAYG,0BAKxB,GACbC,SALeC,YAAaP,EAAaI,I,OCgC5BI,EAhCK,SAClBC,GAMA,MAA4BC,mBAAiB,QAA7C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAgCF,mBAAmB,MAAnD,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,wBAAkBK,GAA5C,mBAAOC,EAAP,KAAcC,EAAd,KAGMC,EAAUC,sBAAW,sBAAC,sBAAAC,EAAA,6DAC1BR,EAAU,WACVE,EAAY,MACZG,EAAS,MAHiB,cAKxBH,EALwB,SAKNL,IALM,kCAMxBG,EAAU,WANc,kDAQxBK,EAAS,EAAD,IACRL,EAAU,SATc,0DAWzB,CAACH,IAMJ,OAJAY,qBAAU,WACRH,MACC,CAACA,IAEG,CAAEP,SAAQE,WAAUG,UCTdM,EAjBC,SAACC,GAEf,IAAMC,EAAgBL,sBAAW,sBAAC,sBAAAC,EAAA,+EACzBd,EACJA,SACAmB,KAAoB,YACpBC,OAHI,uBAMJC,GAAG,KAAMJ,IAPoB,2CAQ/B,CACDA,IAGF,OAAOf,EAAYgB,I,OCINI,MAtBf,WAGE,OAFAN,EAAQ,cAGN,qBAAKO,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sCACO,+CADP,0BAGA,mBACEA,UAAU,WACVC,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,gCCEOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5e8b306d.chunk.js","sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = String(process.env.REACT_APP_SUPABASE_URL);\nconst supabaseKey = String(process.env.REACT_APP_SUPABASE_TOKEN);\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// REACT_APP_SUPABASE_URL=xxx REACT_APP_SUPABASE_TOKEN=xxx npm run start\n\nexport default {\n  supabase,\n};\n","import { useCallback, useEffect, useState } from 'react';\n\ntype Status = 'idle' | 'pending' | 'success' | 'error';\n\nconst useSupaBase = <R = unknown>(\n  asyncFunction: (...args: unknown[]) => Promise<R>,\n): {\n  status: Status,\n  response: R | null,\n  error: unknown,\n} => {\n  const [status, setStatus] = useState<Status>('idle');\n  const [response, setResponse] = useState<R | null>(null);\n  const [error, setError] = useState<unknown>(undefined);\n\n  // eslint-disable-next-line space-before-function-paren\n  const execute = useCallback(async () => {\n    setStatus('pending');\n    setResponse(null);\n    setError(null);\n    try {\n      setResponse(await asyncFunction());\n      setStatus('success');\n    } catch (err) {\n      setError(err);\n      setStatus('error');\n    }\n  }, [asyncFunction]);\n\n  useEffect(() => {\n    execute();\n  }, [execute]);\n\n  return { status, response, error };\n};\n\nexport default useSupaBase;\n","import { useCallback } from 'react';\nimport supabase from '../utils/supabase';\nimport { IUser } from '../interfaces/IUser.interface';\nimport useSupaBase from './useSupaBase';\n\ntype EmployeeQuery = IUser;\n\nconst useUser = (id: string) => {\n  // eslint-disable-next-line space-before-function-paren\n  const supabaseQuery = useCallback(async () => {\n    return supabase\n      .supabase\n      .from<EmployeeQuery>('employee')\n      .select(`\n        *\n      `)\n      .eq('id', id);\n  }, [\n    id,\n  ]);\n\n  return useSupaBase(supabaseQuery);\n};\n\nexport default useUser;\n","import React from 'react';\nimport useUser from '../hooks/useUser';\n\nfunction App() {\n  useUser('dsfdskfkds');\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn Reacta\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}